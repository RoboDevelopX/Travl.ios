//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.segue` struct is generated, and contains static references to 6 view controllers.
  struct segue {
    /// This struct is generated for `ActivityMenuVC`, and contains static references to 1 segues.
    struct activityMenuVC {
      /// Segue identifier `goToTourMenu`.
      static let goToTourMenu: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ActivityMenuVC, TourMenuVC> = Rswift.StoryboardSegueIdentifier(identifier: "goToTourMenu")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `goToTourMenu`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToTourMenu(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ActivityMenuVC, TourMenuVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.activityMenuVC.goToTourMenu, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `BaseDiscoverVC`, and contains static references to 1 segues.
    struct baseDiscoverVC {
      /// Segue identifier `goToDetails`.
      static let goToDetails: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, BaseDiscoverVC, ItenaryVC> = Rswift.StoryboardSegueIdentifier(identifier: "goToDetails")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `goToDetails`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToDetails(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, BaseDiscoverVC, ItenaryVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.baseDiscoverVC.goToDetails, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `BasePlannerVC`, and contains static references to 2 segues.
    struct basePlannerVC {
      /// Segue identifier `goToCreatePlanner`.
      static let goToCreatePlanner: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, BasePlannerVC, CreatePlannerVC> = Rswift.StoryboardSegueIdentifier(identifier: "goToCreatePlanner")
      /// Segue identifier `goToPlannerDetails`.
      static let goToPlannerDetails: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, BasePlannerVC, PlannerDetailsVC> = Rswift.StoryboardSegueIdentifier(identifier: "goToPlannerDetails")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `goToCreatePlanner`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToCreatePlanner(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, BasePlannerVC, CreatePlannerVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.basePlannerVC.goToCreatePlanner, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `goToPlannerDetails`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToPlannerDetails(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, BasePlannerVC, PlannerDetailsVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.basePlannerVC.goToPlannerDetails, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `ItenaryDetailsVC`, and contains static references to 1 segues.
    struct itenaryDetailsVC {
      /// Segue identifier `goToMap`.
      static let goToMap: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ItenaryDetailsVC, ItenaryMapViewVC> = Rswift.StoryboardSegueIdentifier(identifier: "goToMap")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `goToMap`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToMap(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ItenaryDetailsVC, ItenaryMapViewVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.itenaryDetailsVC.goToMap, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `ItenarySheetVC`, and contains static references to 1 segues.
    struct itenarySheetVC {
      /// Segue identifier `goToItenaryDetails`.
      static let goToItenaryDetails: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ItenarySheetVC, ItenaryDetailsVC> = Rswift.StoryboardSegueIdentifier(identifier: "goToItenaryDetails")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `goToItenaryDetails`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToItenaryDetails(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ItenarySheetVC, ItenaryDetailsVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.itenarySheetVC.goToItenaryDetails, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `PlannerDetailsVC`, and contains static references to 2 segues.
    struct plannerDetailsVC {
      /// Segue identifier `goToALDetails`.
      static let goToALDetails: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, PlannerDetailsVC, ALDetailsVC> = Rswift.StoryboardSegueIdentifier(identifier: "goToALDetails")
      /// Segue identifier `goToActivityMenu`.
      static let goToActivityMenu: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, PlannerDetailsVC, ActivityMenuVC> = Rswift.StoryboardSegueIdentifier(identifier: "goToActivityMenu")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `goToALDetails`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToALDetails(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, PlannerDetailsVC, ALDetailsVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.plannerDetailsVC.goToALDetails, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `goToActivityMenu`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToActivityMenu(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, PlannerDetailsVC, ActivityMenuVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.plannerDetailsVC.goToActivityMenu, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `Discover`.
    static let discover = _R.storyboard.discover()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Planner`.
    static let planner = _R.storyboard.planner()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Discover", bundle: ...)`
    static func discover(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.discover)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Planner", bundle: ...)`
    static func planner(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.planner)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 4 files.
  struct file {
    /// Resource file `image1.jpg`.
    static let image1Jpg = Rswift.FileResource(bundle: R.hostingBundle, name: "image1", pathExtension: "jpg")
    /// Resource file `image2.jpg`.
    static let image2Jpg = Rswift.FileResource(bundle: R.hostingBundle, name: "image2", pathExtension: "jpg")
    /// Resource file `image3.jpg`.
    static let image3Jpg = Rswift.FileResource(bundle: R.hostingBundle, name: "image3", pathExtension: "jpg")
    /// Resource file `image4.jpg`.
    static let image4Jpg = Rswift.FileResource(bundle: R.hostingBundle, name: "image4", pathExtension: "jpg")

    /// `bundle.url(forResource: "image1", withExtension: "jpg")`
    static func image1Jpg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.image1Jpg
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "image2", withExtension: "jpg")`
    static func image2Jpg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.image2Jpg
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "image3", withExtension: "jpg")`
    static func image3Jpg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.image3Jpg
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "image4", withExtension: "jpg")`
    static func image4Jpg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.image4Jpg
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 5 images.
  struct image {
    /// Image `image1.jpg`.
    static let image1Jpg = Rswift.ImageResource(bundle: R.hostingBundle, name: "image1.jpg")
    /// Image `image1`.
    static let image1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "image1")
    /// Image `image2.jpg`.
    static let image2Jpg = Rswift.ImageResource(bundle: R.hostingBundle, name: "image2.jpg")
    /// Image `image3.jpg`.
    static let image3Jpg = Rswift.ImageResource(bundle: R.hostingBundle, name: "image3.jpg")
    /// Image `image4.jpg`.
    static let image4Jpg = Rswift.ImageResource(bundle: R.hostingBundle, name: "image4.jpg")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "image1", bundle: ..., traitCollection: ...)`
    static func image1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "image1.jpg", bundle: ..., traitCollection: ...)`
    static func image1Jpg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image1Jpg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "image2.jpg", bundle: ..., traitCollection: ...)`
    static func image2Jpg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image2Jpg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "image3.jpg", bundle: ..., traitCollection: ...)`
    static func image3Jpg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image3Jpg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "image4.jpg", bundle: ..., traitCollection: ...)`
    static func image4Jpg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image4Jpg, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 13 nibs.
  struct nib {
    /// Nib `ActivityInfoCellTableViewCell`.
    static let activityInfoCellTableViewCell = _R.nib._ActivityInfoCellTableViewCell()
    /// Nib `ActivityListCell`.
    static let activityListCell = _R.nib._ActivityListCell()
    /// Nib `BasePlannerImageFooter`.
    static let basePlannerImageFooter = _R.nib._BasePlannerImageFooter()
    /// Nib `BasePlannerTableHeader`.
    static let basePlannerTableHeader = _R.nib._BasePlannerTableHeader()
    /// Nib `DescriptionCell`.
    static let descriptionCell = _R.nib._DescriptionCell()
    /// Nib `DiscoverCell`.
    static let discoverCell = _R.nib._DiscoverCell()
    /// Nib `InfoCell`.
    static let infoCell = _R.nib._InfoCell()
    /// Nib `ItenaryCell`.
    static let itenaryCell = _R.nib._ItenaryCell()
    /// Nib `ItenaryInfoCollectionCell`.
    static let itenaryInfoCollectionCell = _R.nib._ItenaryInfoCollectionCell()
    /// Nib `MapPreviewCell`.
    static let mapPreviewCell = _R.nib._MapPreviewCell()
    /// Nib `MenuPlannerCollectionCell`.
    static let menuPlannerCollectionCell = _R.nib._MenuPlannerCollectionCell()
    /// Nib `PlannerDateCell`.
    static let plannerDateCell = _R.nib._PlannerDateCell()
    /// Nib `PlannerItemsCell`.
    static let plannerItemsCell = _R.nib._PlannerItemsCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ActivityInfoCellTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.activityInfoCellTableViewCell) instead")
    static func activityInfoCellTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.activityInfoCellTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ActivityListCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.activityListCell) instead")
    static func activityListCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.activityListCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BasePlannerImageFooter", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.basePlannerImageFooter) instead")
    static func basePlannerImageFooter(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.basePlannerImageFooter)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BasePlannerTableHeader", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.basePlannerTableHeader) instead")
    static func basePlannerTableHeader(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.basePlannerTableHeader)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DescriptionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.descriptionCell) instead")
    static func descriptionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.descriptionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DiscoverCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.discoverCell) instead")
    static func discoverCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.discoverCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "InfoCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.infoCell) instead")
    static func infoCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.infoCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ItenaryCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.itenaryCell) instead")
    static func itenaryCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.itenaryCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ItenaryInfoCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.itenaryInfoCollectionCell) instead")
    static func itenaryInfoCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.itenaryInfoCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MapPreviewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mapPreviewCell) instead")
    static func mapPreviewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mapPreviewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuPlannerCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuPlannerCollectionCell) instead")
    static func menuPlannerCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuPlannerCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PlannerDateCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.plannerDateCell) instead")
    static func plannerDateCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.plannerDateCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PlannerItemsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.plannerItemsCell) instead")
    static func plannerItemsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.plannerItemsCell)
    }
    #endif

    static func activityInfoCellTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ActivityInfoCellTableViewCell? {
      return R.nib.activityInfoCellTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ActivityInfoCellTableViewCell
    }

    static func activityListCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ActivityListCell? {
      return R.nib.activityListCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ActivityListCell
    }

    static func basePlannerImageFooter(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BasePlannerImageFooter? {
      return R.nib.basePlannerImageFooter.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BasePlannerImageFooter
    }

    static func basePlannerTableHeader(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BasePlannerTableHeader? {
      return R.nib.basePlannerTableHeader.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BasePlannerTableHeader
    }

    static func descriptionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DescriptionCell? {
      return R.nib.descriptionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DescriptionCell
    }

    static func discoverCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DiscoverCell? {
      return R.nib.discoverCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DiscoverCell
    }

    static func infoCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InfoCell? {
      return R.nib.infoCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InfoCell
    }

    static func itenaryCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItenaryCell? {
      return R.nib.itenaryCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItenaryCell
    }

    static func itenaryInfoCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItenaryInfoCollectionCell? {
      return R.nib.itenaryInfoCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItenaryInfoCollectionCell
    }

    static func mapPreviewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MapPreviewCell? {
      return R.nib.mapPreviewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MapPreviewCell
    }

    static func menuPlannerCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuPlannerCollectionCell? {
      return R.nib.menuPlannerCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuPlannerCollectionCell
    }

    static func plannerDateCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PlannerDateCell? {
      return R.nib.plannerDateCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PlannerDateCell
    }

    static func plannerItemsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PlannerItemsCell? {
      return R.nib.plannerItemsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PlannerItemsCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 14 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ActivityCollectionCell`.
    static let activityCollectionCell: Rswift.ReuseIdentifier<ActivityCollectionCell> = Rswift.ReuseIdentifier(identifier: "ActivityCollectionCell")
    /// Reuse identifier `ActivityInfoCellTableViewCell`.
    static let activityInfoCellTableViewCell: Rswift.ReuseIdentifier<ActivityInfoCellTableViewCell> = Rswift.ReuseIdentifier(identifier: "ActivityInfoCellTableViewCell")
    /// Reuse identifier `ActivityListCell`.
    static let activityListCell: Rswift.ReuseIdentifier<ActivityListCell> = Rswift.ReuseIdentifier(identifier: "ActivityListCell")
    /// Reuse identifier `BasePlannerHeader`.
    static let basePlannerHeader: Rswift.ReuseIdentifier<BasePlannerTableHeader> = Rswift.ReuseIdentifier(identifier: "BasePlannerHeader")
    /// Reuse identifier `CollectionCell`.
    static let collectionCell: Rswift.ReuseIdentifier<ItenaryInfoCollectionCell> = Rswift.ReuseIdentifier(identifier: "CollectionCell")
    /// Reuse identifier `DescriptionCell`.
    static let descriptionCell: Rswift.ReuseIdentifier<DescriptionCell> = Rswift.ReuseIdentifier(identifier: "DescriptionCell")
    /// Reuse identifier `ImageSliderFooter`.
    static let imageSliderFooter: Rswift.ReuseIdentifier<BasePlannerImageFooter> = Rswift.ReuseIdentifier(identifier: "ImageSliderFooter")
    /// Reuse identifier `InfoCell`.
    static let infoCell: Rswift.ReuseIdentifier<InfoCell> = Rswift.ReuseIdentifier(identifier: "InfoCell")
    /// Reuse identifier `MapPreviewCell`.
    static let mapPreviewCell: Rswift.ReuseIdentifier<MapPreviewCell> = Rswift.ReuseIdentifier(identifier: "MapPreviewCell")
    /// Reuse identifier `MenuCollectionCell`.
    static let menuCollectionCell: Rswift.ReuseIdentifier<MenuPlannerCollectionCell> = Rswift.ReuseIdentifier(identifier: "MenuCollectionCell")
    /// Reuse identifier `PlannerDateCell`.
    static let plannerDateCell: Rswift.ReuseIdentifier<PlannerDateCell> = Rswift.ReuseIdentifier(identifier: "PlannerDateCell")
    /// Reuse identifier `cell`.
    static let cell: Rswift.ReuseIdentifier<ItenaryCell> = Rswift.ReuseIdentifier(identifier: "cell")
    /// Reuse identifier `discoverCell`.
    static let discoverCell: Rswift.ReuseIdentifier<DiscoverCell> = Rswift.ReuseIdentifier(identifier: "discoverCell")
    /// Reuse identifier `plannerItemsCell`.
    static let plannerItemsCell: Rswift.ReuseIdentifier<PlannerItemsCell> = Rswift.ReuseIdentifier(identifier: "plannerItemsCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _ActivityInfoCellTableViewCell.validate()
      try _ActivityListCell.validate()
      try _BasePlannerImageFooter.validate()
      try _BasePlannerTableHeader.validate()
      try _MenuPlannerCollectionCell.validate()
      try _PlannerDateCell.validate()
      try _PlannerItemsCell.validate()
    }

    struct _ActivityInfoCellTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ActivityInfoCellTableViewCell

      let bundle = R.hostingBundle
      let identifier = "ActivityInfoCellTableViewCell"
      let name = "ActivityInfoCellTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ActivityInfoCellTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ActivityInfoCellTableViewCell
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "mappin") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'mappin' is used in nib 'ActivityInfoCellTableViewCell', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "phone.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'phone.fill' is used in nib 'ActivityInfoCellTableViewCell', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "safari.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'safari.fill' is used in nib 'ActivityInfoCellTableViewCell', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ActivityListCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ActivityListCell

      let bundle = R.hostingBundle
      let identifier = "ActivityListCell"
      let name = "ActivityListCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ActivityListCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ActivityListCell
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "fork.knife.circle.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'fork.knife.circle.fill' is used in nib 'ActivityListCell', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _BasePlannerImageFooter: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = BasePlannerImageFooter

      let bundle = R.hostingBundle
      let identifier = "ImageSliderFooter"
      let name = "BasePlannerImageFooter"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BasePlannerImageFooter? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BasePlannerImageFooter
      }

      static func validate() throws {
        if UIKit.UIImage(named: "image1.jpg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'image1.jpg' is used in nib 'BasePlannerImageFooter', but couldn't be loaded.") }
        if UIKit.UIImage(named: "image2.jpg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'image2.jpg' is used in nib 'BasePlannerImageFooter', but couldn't be loaded.") }
        if UIKit.UIImage(named: "image3.jpg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'image3.jpg' is used in nib 'BasePlannerImageFooter', but couldn't be loaded.") }
        if UIKit.UIImage(named: "image4.jpg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'image4.jpg' is used in nib 'BasePlannerImageFooter', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _BasePlannerTableHeader: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = BasePlannerTableHeader

      let bundle = R.hostingBundle
      let identifier = "BasePlannerHeader"
      let name = "BasePlannerTableHeader"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BasePlannerTableHeader? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BasePlannerTableHeader
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "globe.asia.australia.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'globe.asia.australia.fill' is used in nib 'BasePlannerTableHeader', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _DescriptionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = DescriptionCell

      let bundle = R.hostingBundle
      let identifier = "DescriptionCell"
      let name = "DescriptionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DescriptionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DescriptionCell
      }

      fileprivate init() {}
    }

    struct _DiscoverCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = DiscoverCell

      let bundle = R.hostingBundle
      let identifier = "discoverCell"
      let name = "DiscoverCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DiscoverCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DiscoverCell
      }

      fileprivate init() {}
    }

    struct _InfoCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = InfoCell

      let bundle = R.hostingBundle
      let identifier = "InfoCell"
      let name = "InfoCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InfoCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InfoCell
      }

      fileprivate init() {}
    }

    struct _ItenaryCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ItenaryCell

      let bundle = R.hostingBundle
      let identifier = "cell"
      let name = "ItenaryCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItenaryCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItenaryCell
      }

      fileprivate init() {}
    }

    struct _ItenaryInfoCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ItenaryInfoCollectionCell

      let bundle = R.hostingBundle
      let identifier = "CollectionCell"
      let name = "ItenaryInfoCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItenaryInfoCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItenaryInfoCollectionCell
      }

      fileprivate init() {}
    }

    struct _MapPreviewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MapPreviewCell

      let bundle = R.hostingBundle
      let identifier = "MapPreviewCell"
      let name = "MapPreviewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MapPreviewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MapPreviewCell
      }

      fileprivate init() {}
    }

    struct _MenuPlannerCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MenuPlannerCollectionCell

      let bundle = R.hostingBundle
      let identifier = "MenuCollectionCell"
      let name = "MenuPlannerCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuPlannerCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuPlannerCollectionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "food", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'food' is used in nib 'MenuPlannerCollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PlannerDateCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PlannerDateCell

      let bundle = R.hostingBundle
      let identifier = "PlannerDateCell"
      let name = "PlannerDateCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PlannerDateCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PlannerDateCell
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrow.down") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'arrow.down' is used in nib 'PlannerDateCell', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PlannerItemsCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PlannerItemsCell

      let bundle = R.hostingBundle
      let identifier = "plannerItemsCell"
      let name = "PlannerItemsCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PlannerItemsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PlannerItemsCell
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrow.right") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'arrow.right' is used in nib 'PlannerItemsCell', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try discover.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try planner.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct discover: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let itenaryDetails = StoryboardViewControllerResource<ItenaryDetailsVC>(identifier: "itenaryDetails")
      let itenaryMapViewVC = StoryboardViewControllerResource<ItenaryMapViewVC>(identifier: "ItenaryMapViewVC")
      let itenaryPanel = StoryboardViewControllerResource<ItenarySheetVC>(identifier: "itenaryPanel")
      let name = "Discover"
      let parentItenary = StoryboardViewControllerResource<ItenaryVC>(identifier: "parentItenary")

      func itenaryDetails(_: Void = ()) -> ItenaryDetailsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: itenaryDetails)
      }

      func itenaryMapViewVC(_: Void = ()) -> ItenaryMapViewVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: itenaryMapViewVC)
      }

      func itenaryPanel(_: Void = ()) -> ItenarySheetVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: itenaryPanel)
      }

      func parentItenary(_: Void = ()) -> ItenaryVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: parentItenary)
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "paperplane.circle.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'paperplane.circle.fill' is used in storyboard 'Discover', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "safari") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'safari' is used in storyboard 'Discover', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "xmark") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'xmark' is used in storyboard 'Discover', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.discover().itenaryMapViewVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'itenaryMapViewVC' could not be loaded from storyboard 'Discover' as 'ItenaryMapViewVC'.") }
        if _R.storyboard.discover().itenaryDetails() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'itenaryDetails' could not be loaded from storyboard 'Discover' as 'ItenaryDetailsVC'.") }
        if _R.storyboard.discover().itenaryPanel() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'itenaryPanel' could not be loaded from storyboard 'Discover' as 'ItenarySheetVC'.") }
        if _R.storyboard.discover().parentItenary() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'parentItenary' could not be loaded from storyboard 'Discover' as 'ItenaryVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UITabBarController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if UIKit.UIImage(named: "calendar-tab-bar-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'calendar-tab-bar-icon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "discover-tab-bar-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'discover-tab-bar-icon' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct planner: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let activityMenuContainerVC = StoryboardViewControllerResource<ActivityMenuContainerVC>(identifier: "ActivityMenuContainerVC")
      let basePlannerVC = StoryboardViewControllerResource<BasePlannerVC>(identifier: "BasePlannerVC")
      let bundle = R.hostingBundle
      let createPlanner = StoryboardViewControllerResource<CreatePlannerVC>(identifier: "CreatePlanner")
      let name = "Planner"
      let plannerDetailsVC = StoryboardViewControllerResource<PlannerDetailsVC>(identifier: "PlannerDetailsVC")
      let tourMenuVC = StoryboardViewControllerResource<TourMenuVC>(identifier: "TourMenuVC")

      func activityMenuContainerVC(_: Void = ()) -> ActivityMenuContainerVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: activityMenuContainerVC)
      }

      func basePlannerVC(_: Void = ()) -> BasePlannerVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: basePlannerVC)
      }

      func createPlanner(_: Void = ()) -> CreatePlannerVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createPlanner)
      }

      func plannerDetailsVC(_: Void = ()) -> PlannerDetailsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: plannerDetailsVC)
      }

      func tourMenuVC(_: Void = ()) -> TourMenuVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tourMenuVC)
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "calendar") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'calendar' is used in storyboard 'Planner', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "fun", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fun' is used in storyboard 'Planner', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "plus.circle.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'plus.circle.fill' is used in storyboard 'Planner', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "xmark") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'xmark' is used in storyboard 'Planner', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.planner().activityMenuContainerVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'activityMenuContainerVC' could not be loaded from storyboard 'Planner' as 'ActivityMenuContainerVC'.") }
        if _R.storyboard.planner().basePlannerVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'basePlannerVC' could not be loaded from storyboard 'Planner' as 'BasePlannerVC'.") }
        if _R.storyboard.planner().createPlanner() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createPlanner' could not be loaded from storyboard 'Planner' as 'CreatePlannerVC'.") }
        if _R.storyboard.planner().plannerDetailsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'plannerDetailsVC' could not be loaded from storyboard 'Planner' as 'PlannerDetailsVC'.") }
        if _R.storyboard.planner().tourMenuVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tourMenuVC' could not be loaded from storyboard 'Planner' as 'TourMenuVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
